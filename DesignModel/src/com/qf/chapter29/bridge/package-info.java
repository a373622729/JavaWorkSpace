/**
 * Created by ios on 16/11/21.
 */

/**
 * 桥梁模式:
 *      也叫做桥接模式
 *      将抽象和实现解耦,使得两者可以独立地变化,重点在『解耦』上
 */

/**
 * 例子:
 *      Father类中有一个方法A，Son继承了Father类,GrandSon继承了Son.如果有一天Son要重写父类的方法A,绝对不能重写.
 *      因为GrandSon要用从Father继承过来的方法A,如果修改了,那就要修改Son和GrandSon之间的关系,风险太大.
 *
 * 解决:
 *      在Father类中聚合一个类,将这个方法A放出去.Son子类要拥有这个方法很简单,桥梁搭过去,获得这个方法,GrandSon也一样.
 *      即是Son子类不像用这个方法也没关系,对GrandSon不产生任何影响.
 */

/**
 * 使用场景:
 *      1.不希望或不适用使用继承的场景
 *      2.接口或抽象类不稳定的场景
 *      3.重要性要求较高的场景
 */

/**
 * 注意事项:
 *      1.考虑如何拆分抽象和实现,而不是一涉及到继承就考虑该模式
 *      2.如果发现类的继承有很多层,那么就可以考虑使用桥梁模式
 */

/**
 * 策略模式和桥梁模式的区别:
 *      1.策略模式主要完成的任务是提供两种可以替换的算法
 *      2.桥梁模式关注的是抽象和实现的分离,他是一种结构模式,用来设计一个架构,
 *
 */
package com.qf.chapter29.bridge;