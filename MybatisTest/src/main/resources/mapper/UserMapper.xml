<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--namespace作用是对sql进行分类化管理,理解sql隔离
注意:使用mapper代理开发,namespace有重要作用
-->
<mapper namespace="com.mybatis.mapper.UserMapper">
    <!--开启二级缓存,并将pojo实现序列化-->
    <cache/>

    <!--定义sql片段-->
    <!--经验:
    基于单表定义,这样这个sql片段可重用性才高
    sql片段中不要包括where
    -->
    <sql id="query_user_where">
        <if test="userCustom!=null">
            <if test="userCustom.sex != null and userCustom.sex!=''">
                AND user.sex = #{userCustom.sex}
            </if>
            <if test="userCustom.username != null and userCustom.sex != ''">
                AND user.username like '%${userCustom.username}'
            </if>
            <if test="ids != null">
                <!--forEach传入ids
                collection:指定输入对象中的集合属性
                item:每个遍历生成到哪个对象中
                open:开始遍历时拼接串
                close:结束遍历时拼接串
                separator:遍历中间要拼接的串
                -->
                <foreach collection="ids" item="user_id" open="AND (" close=")" separator="OR">
                    id=#{user_id}
                </foreach>
                <!--<foreach collection="ids" item="user_id" open="AND id IN (" close=")" separator=", ">-->
                <!--#{user_id}-->
                <!--</foreach>-->
            </if>
        </if>
    </sql>

    <!--用户信息的综合查询-->
    <select id="findUserList" parameterType="com.mybatis.po.UserQueryVo" resultType="com.mybatis.po.UserCustom">
        SELECT * FROM user
        <!-- where可以自动去掉第一个and-->
        <where>
            <!--引用sql片段,不在本xml中,要加入namespace-->
            <include refid="query_user_where"/>
            <!--还可以引用其他的片段-->
        </where>
    </select>

    <!--用户信息综合查询总数-->
    <select id="findUserCount" parameterType="com.mybatis.po.UserQueryVo" resultType="int">
        SELECT count(*)
        FROM user
        <where>
            <if test="userCustom!=null">
                <if test="userCustom.sex != null and userCustom.sex!=''">
                    AND user.sex = #{userCustom.sex}
                </if>
                <if test="userCustom.username != null and userCustom.sex != ''">
                    AND user.username like '%${userCustom.username}'
                </if>
            </if>
        </where>
    </select>

    <!--使用resultMap作为结果输出映射-->

    <!--定义resultMap,为了将查询出的列名和pojo不一致
    type是最终映射的java对象类型,可以用别名,
    id:是对reslutMap的标识
    -->

    <resultMap id="userResultMap" type="com.mybatis.po.User">
        <!--id表示查询结果集中唯一标识
        column:查询出来的别名
        property:type指定的pojo类型中的属性名
        -->
        <id column="id_" property="id"/>
        <!--对普通列的定义-->
        <result column="username_" property="username"/>
    </resultMap>
    <!--resultMap 放定义的resultMap的id,如果在其他文件中,要加namespace-->
    <select id="findUserByIdResultMap" parameterType="int" resultMap="userResultMap">
        SELECT
            id       id_,
            username username_
        FROM user
        WHERE id =#{id}
    </select>

    <!--映射文件配置sql语句-->
    <!--
    id:标识映射文件的sql,称谓statment的id,将sql语句封装到mapped statment对象中
    #{}:表示占位符
    #{id}:id表示输入的参数,参数名称是id,输入参数是简单类型,参数明可以任意value或其他都行
    -->
    <select id="findUserById" parameterType="int" resultType="com.mybatis.po.User" useCache="false"><!-- 针对每次查询都需要最新的数据sql,可以设置禁用缓存 -->
        SELECT *
        FROM user
        WHERE id =#{id}
    </select>

    <!--根据用户名称模糊查询用户信息
    ${}表示拼接串,但是这样容易有 sql注入的隐患
    ${value}接收传入参数内容,如果是简单类型,只能用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="com.mybatis.po.User">
        SELECT *
        FROM user
        WHERE username LIKE '%${value}%'
    </select>

    <!--添加用户-->
    <!--
    #{}中指定pojo属性明,mybatis通过OGNL获取对象的属性值
    -->

    <!--自增主键返回
    mysql自增主键, 执行insert之前自动生成一个主键
    通过mysql函数获得 LAST_INSERT_ID() 在insert之后调用该函数
    -->
    <insert id="insertUser" parameterType="com.mybatis.po.User" flushCache="true"> <!-- 刷新缓存,一般执行玩commit都需要刷新缓存-->
        # 插入数据的主键返回到 传递进来的user对象中, 不用写id
        # keyProperty: 把查询出来的结果放到哪个属性中
        # order: 相对于select的执行顺序
        # resultType: 指定结果类型
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT last_insert_id()
        </selectKey>
        INSERT INTO user(username, birthday, sex, address) VALUE (#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--非自增的主键用uuid
    相对于select是之前执行的
    oracle中的序列也这么用
    -->
    <insert id="insertUserReturnUUID" parameterType="com.mybatis.po.User">
        # insert之前生成uuid设置到id中,再执行insert语句
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
            SELECT uuid()
        </selectKey>
        INSERT INTO user(id, username, birthday, sex, address) VALUE (#{id},#{username},#{birthday},#{sex},#{address})
    </insert>

    <!--删除用户-->
    <delete id="deleteUser" parameterType="java.lang.Integer">
        DELETE FROM user
        WHERE id =#{id}
    </delete>

    <!--根据id更新用户-->
    <update id="updateUser" parameterType="com.mybatis.po.User">
        UPDATE user
        SET username =#{username}, birthday=#{birthday}, sex=#{sex}, address=#{address} WHERE id=#{id}
    </update>
</mapper>
